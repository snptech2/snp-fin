// prisma/schema.prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  currency     String        @default("EUR") // EUR, USD
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // Relazioni
  accounts     Account[]
  transactions Transaction[]
  categories   Category[]
  budgets      Budget[]
  transfers    Transfer[]
  dcaPortfolios DCAPortfolio[]
}

model Account {
  id              Int           @id @default(autoincrement())
  name            String
  type            String        @default("bank") // "bank" | "investment"
  balance         Float         @default(0)
  isDefault       Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          Int
  user            User          @relation(fields: [userId], references: [id])
  
  // Relazioni
  transactions    Transaction[]
  transfersFrom   Transfer[]    @relation("FromAccount")
  transfersTo     Transfer[]    @relation("ToAccount")
  dcaTransactions DCATransaction[]
  dcaPortfolios   DCAPortfolio[]
}

model Category {
  id           Int           @id @default(autoincrement())
  name         String
  type         String        // "income" o "expense"
  color        String        @default("#3B82F6")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  
  // Relazioni
  transactions Transaction[]
}

model Transaction {
  id          Int      @id @default(autoincrement())
  description String?
  amount      Float
  date        DateTime @default(now())
  type        String   // "income" o "expense"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  
  accountId   Int
  account     Account  @relation(fields: [accountId], references: [id])
  
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
}

model Transfer {
  id          Int      @id @default(autoincrement())
  amount      Float
  description String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  
  fromAccountId Int
  fromAccount   Account @relation("FromAccount", fields: [fromAccountId], references: [id])
  
  toAccountId   Int
  toAccount     Account @relation("ToAccount", fields: [toAccountId], references: [id])
}

model Budget {
  id          Int      @id @default(autoincrement())
  name        String
  targetAmount Float
  type        String   // "fixed" o "unlimited"
  order       Int      @default(0)
  color       String   @default("#3B82F6")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}

model DCAPortfolio {
  id          Int      @id @default(autoincrement())
  name        String   // "DCA Bitcoin 2024"
  type        String   // "dca_bitcoin", "crypto_wallet", "stocks"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  
  // Collegamento obbligatorio a conto investimento
  accountId   Int
  account     Account @relation(fields: [accountId], references: [id])
  
  // Relazioni
  transactions DCATransaction[]
  networkFees  NetworkFee[]
}

// ðŸŸ  AGGIORNATO: Supporto per vendite Bitcoin!
model DCATransaction {
  id           Int      @id @default(autoincrement())
  date         DateTime @default(now())
  type         String   @default("buy") // "buy" | "sell" ðŸŸ  NUOVO CAMPO!
  broker       String   // "Binance", "Kraken", etc.
  info         String   // "Regalo", "DCA", "Acquisto", "Vendita", etc.
  btcQuantity  Float    // 0.01012503 (positiva per buy, negativa per sell)
  eurPaid      Float    // 275.00 (manteniamo nome originale per compatibility)
  notes        String?  // "Verificato", etc.
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  portfolioId  Int
  portfolio    DCAPortfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  
  // Collegamento opzionale per scalare/aggiungere al conto
  accountId    Int?
  account      Account? @relation(fields: [accountId], references: [id])
}

model NetworkFee {
  id          Int      @id @default(autoincrement())
  sats        Int      // 2000 sats fee di rete
  date        DateTime @default(now())
  description String?  // "Transfer to cold wallet"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  portfolioId Int
  portfolio   DCAPortfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}