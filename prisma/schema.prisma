// prisma/schema.prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  password     String?
  currency     String        @default("EUR") // EUR, USD
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // 🎯 SISTEMA MODULARE - Configurazioni personalizzazione
  moduleSettings       Json?         // Configurazioni moduli attivati/disattivati
  onboardingStep       Int           @default(0) // Step tutorial completati (0-5)
  onboardingCompleted  Boolean       @default(false)
  appProfile           String?       // "personal", "business", "investor", "custom"
  onboardingCompletedAt DateTime?    // Timestamp completamento setup
  
  // Relazioni
  accounts     Account[]
  transactions Transaction[]
  categories   Category[]
  budgets      Budget[]
  transfers    Transfer[]
  dcaPortfolios DCAPortfolio[]
  cryptoPortfolios CryptoPortfolio[]
  
  // Partita IVA
  partitaIVAConfigs PartitaIVAConfig[]
  partitaIVAIncomes PartitaIVAIncome[]
  partitaIVATaxPayments PartitaIVATaxPayment[]
  
  // Beni Non Correnti e Crediti
  nonCurrentAssets NonCurrentAsset[]
  credits Credit[]
  
  // Holdings Tracking
  holdingsSnapshots HoldingsSnapshot[]
  snapshotSettings  SnapshotSettings?

}




model Account {
  id              Int           @id @default(autoincrement())
  name            String
  type            String        @default("bank") // "bank" | "investment"
  balance         Float         @default(0)
  isDefault       Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          Int
  user            User          @relation(fields: [userId], references: [id])
  
  // Relazioni
  transactions    Transaction[]
  transfersFrom   Transfer[]    @relation("FromAccount")
  transfersTo     Transfer[]    @relation("ToAccount")
  dcaTransactions DCATransaction[]
  dcaPortfolios   DCAPortfolio[]
  cryptoPortfolios CryptoPortfolio[]
  
  // Partita IVA
  partitaIVAIncomes PartitaIVAIncome[]
  partitaIVATaxPayments PartitaIVATaxPayment[]
}

model Category {
  id           Int           @id @default(autoincrement())
  name         String
  type         String        // "income" o "expense"
  color        String        @default("#3B82F6")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  
  // Relazioni
  transactions Transaction[]
}

model Transaction {
  id          Int      @id @default(autoincrement())
  description String?
  amount      Float
  date        DateTime @default(now())
  type        String   // "income" o "expense"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  
  accountId   Int
  account     Account  @relation(fields: [accountId], references: [id])
  
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
}

model Transfer {
  id          Int      @id @default(autoincrement())
  amount      Float
  description String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  
  fromAccountId Int
  fromAccount   Account @relation("FromAccount", fields: [fromAccountId], references: [id])
  
  toAccountId   Int
  toAccount     Account @relation("ToAccount", fields: [toAccountId], references: [id])
}

model Budget {
  id          Int      @id @default(autoincrement())
  name        String
  targetAmount Float
  type        String   // "fixed" o "unlimited"
  order       Int      @default(0)
  color       String   @default("#3B82F6")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}

model DCAPortfolio {
  id          Int      @id @default(autoincrement())
  name        String   // "DCA Bitcoin 2024"
  type        String   // "dca_bitcoin", "crypto_wallet", "stocks"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  
  // Collegamento obbligatorio a conto investimento
  accountId   Int
  account     Account @relation(fields: [accountId], references: [id])
  
  // Relazioni
  transactions DCATransaction[]
  networkFees  NetworkFee[]
}

// 🟠 AGGIORNATO: Supporto per vendite Bitcoin!
model DCATransaction {
  id           Int      @id @default(autoincrement())
  date         DateTime @default(now())
  type         String   @default("buy") // "buy" | "sell" 🟠 NUOVO CAMPO!
  broker       String   // "Binance", "Kraken", etc.
  info         String   // "Regalo", "DCA", "Acquisto", "Vendita", etc.
  btcQuantity  Float    // 0.01012503 (positiva per buy, negativa per sell)
  eurPaid      Float    // 275.00 (manteniamo nome originale per compatibility)
  notes        String?  // "Verificato", etc.
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  portfolioId  Int
  portfolio    DCAPortfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  
  // Collegamento opzionale per scalare/aggiungere al conto
  accountId    Int?
  account      Account? @relation(fields: [accountId], references: [id])
}

model NetworkFee {
  id          Int      @id @default(autoincrement())
  sats        Int?     // 2000 sats fee di rete (per DCA/Bitcoin) - ora opzionale
  quantity    Float?   // Quantità fee in asset nativo (per crypto multi-asset)
  eurValue    Float?   // Valore EUR della fee (calcolato o inserito manualmente)
  date        DateTime @default(now())
  description String?  // "Transfer to cold wallet", "On-chain transfer", etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // DCA Portfolio (compatibilità esistente)
  portfolioId Int?
  portfolio   DCAPortfolio? @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  
  // 🆕 CRYPTO Portfolio (nuovo supporto multi-asset)
  cryptoPortfolioId Int?
  cryptoPortfolio   CryptoPortfolio? @relation(fields: [cryptoPortfolioId], references: [id], onDelete: Cascade)
  
  // 🆕 Asset della fee (BTC, ETH, SOL, etc.)
  assetId     Int?
  asset       CryptoPortfolioAsset? @relation(fields: [assetId], references: [id])
}

// 🚀 CRYPTO PORTFOLIO - Wallet multi-asset semplice
model CryptoPortfolio {
  id          Int      @id @default(autoincrement())
  name        String   // "My Crypto Wallet"
  description String?  // "Portfolio principale"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  
  accountId   Int
  account     Account @relation(fields: [accountId], references: [id])
  
  // Relazioni
  transactions CryptoPortfolioTransaction[]
  holdings     CryptoPortfolioHolding[]
  networkFees  NetworkFee[]
}

// Asset disponibili (aggiungibili manualmente)
model CryptoPortfolioAsset {
  id          Int      @id @default(autoincrement())
  symbol      String   @unique // "BTC", "ETH", "SOL"
  name        String   // "Bitcoin", "Ethereum", "Solana"
  decimals    Int      @default(6)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  transactions CryptoPortfolioTransaction[]
  holdings     CryptoPortfolioHolding[]
  networkFees  NetworkFee[]
}

// Transazioni: Buy, Sell, Swap
model CryptoPortfolioTransaction {
  id           Int      @id @default(autoincrement())
  date         DateTime @default(now())
  type         String   // "buy" | "sell" | "swap_in" | "swap_out" | "stake_reward"
  quantity     Float    // Quantità asset
  eurValue     Float    // Valore EUR
  pricePerUnit Float    // Prezzo unitario
  broker       String?  // Broker (opzionale)
  notes        String?  // Note
  
  // Per swap
  swapPairId   Int?
  swapPair     CryptoPortfolioTransaction? @relation("SwapPair", fields: [swapPairId], references: [id])
  swapRelated  CryptoPortfolioTransaction[] @relation("SwapPair")
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  portfolioId  Int
  portfolio    CryptoPortfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  
  assetId      Int
  asset        CryptoPortfolioAsset @relation(fields: [assetId], references: [id])
}

// Holdings correnti
model CryptoPortfolioHolding {
  id           Int      @id @default(autoincrement())
  quantity     Float    // Quantità posseduta
  avgPrice     Float    // Prezzo medio acquisto
  totalInvested Float   // EUR investiti
  realizedGains Float   @default(0) // Profitti da vendite
  lastUpdated  DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  portfolioId  Int
  portfolio    CryptoPortfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  
  assetId      Int
  asset        CryptoPortfolioAsset @relation(fields: [assetId], references: [id])
  
  @@unique([portfolioId, assetId])
}


// 🔥 PARTITA IVA - Configurazione percentuali per anno
model PartitaIVAConfig {
  id                    Int      @id @default(autoincrement())
  anno                  Int      // Anno fiscale (2024, 2025, etc.)
  percentualeImponibile Float    @default(78)    // Percentuale imponibile (default 78%)
  percentualeImposta    Float    @default(5)     // Percentuale imposta (default 5%)
  percentualeContributi Float    @default(26.23) // Percentuale contributi (default 26.23%)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  userId                Int
  user                  User     @relation(fields: [userId], references: [id])
  
  // Relazioni
  partitaIVAIncomes     PartitaIVAIncome[]
  
  @@unique([anno, userId])
  @@map("partita_iva_configs")
}

// 🔥 PARTITA IVA - Entrate con calcoli automatici
model PartitaIVAIncome {
  id              Int      @id @default(autoincrement())
  dataIncasso     DateTime // Data incasso effettivo
  dataEmissione   DateTime // Data emissione fattura
  riferimento     String   // Numero fattura o riferimento
  entrata         Float    // Importo lordo fatturato
  
  // Calcoli automatici (calcolati dal backend)
  imponibile      Float    // entrata * percentualeImponibile / 100
  imposta         Float    // imponibile * percentualeImposta / 100
  contributi      Float    // imponibile * percentualeContributi / 100
  totaleTasse     Float    // imposta + contributi
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  
  // Collegamento alla configurazione dell'anno
  configId        Int
  config          PartitaIVAConfig @relation(fields: [configId], references: [id])
  
  // Collegamento al conto bancario per l'incasso
  accountId       Int?
  account         Account? @relation(fields: [accountId], references: [id])
  
  @@map("partita_iva_incomes")
}

// 🔥 PARTITA IVA - Pagamenti tasse effettuati
model PartitaIVATaxPayment {
  id          Int      @id @default(autoincrement())
  data        DateTime // Data pagamento
  descrizione String   // Descrizione pagamento (es: "F24 I trimestre 2024")
  importo     Float    // Importo pagato
  tipo        String   @default("generico") // Tipo pagamento: "imposta", "contributi", "generico"
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  
  // Collegamento al conto bancario da cui è stato prelevato
  accountId   Int?
  account     Account? @relation(fields: [accountId], references: [id])
  
  @@map("partita_iva_tax_payments")
}

// 🏠 BENI NON CORRENTI - Casa, auto, terreni, etc.
model NonCurrentAsset {
  id          Int      @id @default(autoincrement())
  name        String   // "Casa", "Auto", "Terreno"
  description String?  // Descrizione dettagliata
  value       Float    // Valore stimato in EUR
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  
  @@map("non_current_assets")
}

// 💰 CREDITI - Prestiti ad altri, crediti vs aziende, etc.
model Credit {
  id          Int      @id @default(autoincrement())
  name        String   // "Prestito a Mario", "Credito vs Azienda X"
  description String?  // Descrizione dettagliata
  amount      Float    // Importo in EUR
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  
  @@map("credits")
}

// 📊 HOLDINGS SNAPSHOT - Tracking storico valore portfolio
model HoldingsSnapshot {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  
  // Timestamp come nel tuo Excel (combiniamo Date + Time)
  date            DateTime @default(now())
  
  // I tuoi campi esatti dal file Excel
  btcUsd          Float    // BTCUSD - prezzo Bitcoin in USD
  dirtyDollars    Float    // Valore totale holdings in USD
  dirtyEuro       Float    // Valore totale holdings in EUR  
  btc             Float    // BTC totali equivalenti
  
  // Campi aggiuntivi per tracking dettagliato
  cryptoValue     Float?   // Valore solo crypto portfolios
  dcaValue        Float?   // Valore solo DCA portfolios
  
  // Metadata
  isAutomatic     Boolean  @default(false) // Se creato automaticamente
  note            String?  // Note opzionali per snapshot manuali
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([userId, date])
  @@map("holdings_snapshots")
}

// 📊 SNAPSHOT SETTINGS - Configurazioni automazione snapshot
model SnapshotSettings {
  id                  Int      @id @default(autoincrement())
  userId              Int      @unique
  user                User     @relation(fields: [userId], references: [id])
  
  autoSnapshotEnabled Boolean  @default(false)     // Abilitare snapshot automatici
  frequency           String   @default("daily")    // daily, 6hours, weekly, monthly
  preferredHour       Int?     // Ora preferita (0-23) per snapshot giornalieri
  lastSnapshot        DateTime?                     // Timestamp ultimo snapshot automatico
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@map("snapshot_settings")
}